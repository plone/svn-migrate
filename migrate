#!bin/py

import re
import os
import shlex
import json
import shutil
import urllib2
import xmlrpclib
import ConfigParser
import requests

from argh import arg
from argh import ArghParser

from subprocess import Popen
from subprocess import PIPE
from xml.etree import ElementTree


CWD = os.path.dirname(__file__)
GITHUB = 'https://api.github.com'
VERSION_RE = re.compile(r'^(plone|v)?[\d._-]+'
    '(alpha|beta|branch|rc|RC|final|a|b|c|x)?(\d)*$')

#
# common utils
def path(*arg):
    return os.path.abspath(os.path.join(*arg))

def call(cmd, *arg, **kw):
    #print "COMMAND: " + cmd
    return Popen(shlex.split(cmd), *arg, **kw).communicate()[0]

def header(txt):
    print
    print '-'*len(txt)
    print txt
    print '-'*len(txt)
    print

def line(txt, level=0):
    print ' '*level*4 + txt

def sha_checklist(directory):
    checklist = []
    for root, dirs, files in os.walk(directory):
        for names in files:
            checklist.append(call('sha1sum '+path(root,names), stdout=PIPE))
    return checklist



# 
# COMMANDS

@arg('--repos', default='plone;collective;archetypes')
@arg('--local-basepath', default=path(CWD, 'repos'))
@arg('--remote-baseurl', default='http://svn.plone.org/svn/')
def sync(args):
    if not os.path.exists(os.path.join(args.local_basepath, 'svn-mirror')):
        call('mkdir %s' % os.path.join(args.local_basepath, 'svn-mirror'))
    
    # we initialize repo folders
    for repo in args.repos.split(';'):
        repo = repo.strip()
        if not repo: continue

        repo_localpath = path(args.local_basepath, 'svn-mirror', repo)
        repo_remoteurl = urllib2.urlparse.urljoin(args.remote_baseurl, repo)

        if not os.path.isdir(repo_localpath):
            call("svnadmin create %s" % repo_localpath)
            hook_path = path(repo_localpath, 'hooks', 'pre-revprop-change')
            with open(hook_path, 'w') as fd:
                fd.writelines(['#!/bin/sh\n', 'exit 0'])
            call('chmod 755 ' + hook_path)
            call('svnsync init file://%s %s' % (repo_localpath, repo_remoteurl))

    # we start syncing the commits
    for repo in args.repos.split(';'):
        repo = repo.strip()
        if not repo: continue

        repo_localpath = path(args.local_basepath, 'svn-mirror', repo)
        repo_remoteurl = urllib2.urlparse.urljoin(args.remote_baseurl, repo)

        call('svn propget svn:sync-last-merged-rev --revprop -r 0 file://%s' % repo_localpath)
        call('svnsync --non-interactive sync file://%s' % repo_localpath)
        call('svnadmin pack %s' % repo_localpath)


@arg('--basepath', default=path(CWD, 'repos'))
@arg('--svn-all-fast-export', default=path(CWD, 'svn2git', 'svn-all-fast-export'))
@arg('--authors', default=path(CWD, 'authors.cfg'))
def svnexport(args):
    for repo in os.listdir(path(args.basepath, 'svn-mirror')):

        rules = path(CWD, 'rules-%s.cfg' % repo)
        svn_mirror = path(args.basepath, 'svn-mirror', repo)
        svn_export = path(args.basepath, 'svn-export', repo)

        if not os.path.isdir(svn_export):
            call('mkdir %s -p' % svn_export)

        call('%s --identity-map %s --rules %s --add-metadata %s' % (
                args.svn_all_fast_export,
                args.authors,
                rules,
                svn_mirror),
             cwd=svn_export)
        # TODO: grep output for possible failures


@arg('--projects', default=path(CWD, 'projects.cfg'))
@arg('--remote-baseurl', default='http://svn.plone.org/svn/')
@arg('--basepath', default=path(CWD, 'repos'))
@arg('--prefix', default='test-')
def gitcopy(args):
    config = ConfigParser.RawConfigParser()
    config.optionxform = lambda s: s
    config.read(args.projects)

    for repo in os.listdir(path(args.basepath, 'svn-mirror')):
        svn_mirror = path(args.basepath, 'svn-mirror', repo)
        svn_export = path(args.basepath, 'svn-export', repo)
        git = path(args.basepath, 'git', repo)

        if not os.path.isdir(git):
            call('mkdir %s -p' % git)

        projects = dict(config.items(repo))
        for item in os.listdir(svn_export):
            if not item.startswith('.') and os.path.isdir(path(svn_export, item)):

                item_path = path(svn_export, item)
                item_git_path = path(git, item)
                if os.path.isdir(item_git_path):
                    print('Skipping copy of ' + item)
                    continue

                print('Processing: %s' % item)
                shutil.copytree(item_path, item_git_path)

                ## get a list of current active svn branches
                remote_svn_url = projects.get(item)
                svn_url = remote_svn_url.replace(args.remote_baseurl+repo, 'file://'+svn_mirror)
                output = call('svn ls ' + svn_url + '/branches', stdout=PIPE)
                svn_branches = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]

                ## remove tags with revision specific information in them
                output = call('git tag -l', cwd=item_git_path, stdout=PIPE)
                for tag in output.split('\n'):
                    if '@' in tag:
                        tag = tag.strip()
                        call('git tag -d ' + tag, cwd=item_git_path)

                ## remove branches
                output = call('git branch --no-color', cwd=item_git_path, stdout=PIPE)
                git_branches = [o.strip() for o in output.split('\n') if o.strip()]
                git_branches = [b.replace('* ', '') for b in git_branches]
                extra_branches = set(git_branches) - set(svn_branches)
                extra_branches = extra_branches - set(['master'])
                for e in extra_branches:
                    match = VERSION_RE.match(e)
                    if match is None:
                        call('git branch -D %s' % e, cwd=item_git_path)

                print('Running garbage collection')
                call('git gc --aggressive --prune=now --quiet', cwd=item_git_path)

                call('git remote add origin git@github.com:plone/%s%s.git' % (
                        args.prefix, item), cwd=item_git_path)

                print('Processed %s\n' % item)


@arg('--github-username', required=True)
@arg('--github-password', required=True)
@arg('--basepath', default=path(CWD, 'repos'))
def publish(args):
    with requests.session(auth=(args.github_username, args.github_password)) as session:

        github_repos = [i['name'] for i in json.loads(session.get(GITHUB+'/orgs/plone/repos').content)]

        for repo in os.listdir(path(args.basepath, 'git')):
            for item in os.listdir(path(args.basepath, 'git', repo)):

                item_path = path(args.basepath, 'git', repo, item)
            
                out = call('git remote -v', cwd=item_path, stdout=PIPE)
                item_name = out.split('\n')[0].split()[1][len('git@github.com:plone/'):-len('.git')]

                if item_name not in github_repos:
                    session.post(GITHUB+'/orgs/plone/repos', json.dumps({
                            'name': item_name,
                            'has_wiki': False,
                            'has_issues': False,
                            }))

                call('git push --all', cwd=item_path)
                call('git push --tags', cwd=item_path)


@arg('--projects', default=path(CWD, 'projects.cfg'))
@arg('--remote-baseurl', default='http://svn.plone.org/svn/')
@arg('--basepath', default=path(CWD, 'repos'))
@arg('--prefix', default='test-')
def analyze(args):

    def compare(msg, svn, git):
        line("- " + msg, 1)
        diff = list(set(svn) - set(git))
        if diff:
            line("svn: "+str(svn), 2)
            line("git: "+str(git), 2)
            line("diff: "+str(diff), 2)
        else:
            line("everything ok", 2)

    def compare_master_and_trunk(item, repo, svn_url):
        line("- Do the contents of the Git master match the SVN trunk.", 1)

        svn_trunk = path(args.basepath, 'svn-trunk', repo, item)
        git_master = path(args.basepath, 'git-master', repo, item)

        if not os.path.isdir(svn_trunk):
            call('mkdir %s -p ' % path(svn_trunk, '..'))
            call('svn export %s/trunk %s' % (svn_url, svn_trunk))
        if not os.path.isdir(git_master):
            call('mkdir %s -p ' % path(git_master, '..'))
            call('git clone %s %s' % (path(args.basepath, 'git', repo, item), item), cwd=path(git_master, '..'))

        f = open(path(args.basepath, 'svn-trunk', 'sha1sum-checklist-%s.txt' % item), 'w+')
        f.writelines([i.replace('svn-trunk', 'git-master') for i in sha_checklist(svn_trunk)])
        f.close()

        try:
            diff = None
            diff = call('sha1sum --quiet -c %s' % path(args.basepath, 'svn-trunk', 'sha1sum-checklist-%s.txt' % item), cwd=git_path, stdout=PIPE, stderr=PIPE)
        except Exception, e:
            if 'sha1sum: WARNING:' in str(e):
                diff = e.out
            else:
                raise e

        diff_list = []
        if diff:
            #if verbose > 0:
            #    for i in diff.split('\n'):
            for i in diff.split('\n'):
                if i:
                    diff_list.append(i)
        if diff_list:
            for i in diff_list:
                line(i, 2)
        else:
            line("everything ok", 2)

    config = ConfigParser.RawConfigParser()
    config.optionxform = lambda s: s
    config.read(args.projects)

    i = 1
    for repo in os.listdir(path(args.basepath, 'git')):
        projects = dict(config.items(repo))
        header('Analyzing "' + repo + '" repository')
        for item in os.listdir(path(args.basepath, 'git', repo)):

            line('%s.) %s' % (i, item))
            i += 1

            ## svn tags and branches
            svn_mirror = path(args.basepath, 'svn-mirror', repo)
            svn_url = projects.get(item).replace(args.remote_baseurl+repo, 'file://'+svn_mirror)
            output = call('svn ls ' + svn_url + '/branches', stdout=PIPE)
            svn_branches = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]
            output = call('svn ls ' + svn_url + '/tags', stdout=PIPE)
            svn_tags = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]

            ## git tags and breanches
            git_path = path(args.basepath, 'git', repo, item)
            output = call('git branch --no-color', cwd=git_path, stdout=PIPE)
            git_branches = [o.strip() for o in output.split('\n') if o.strip()]
            git_branches = [b.replace('* ', '') for b in git_branches]
            output = call('git tag -l', cwd=git_path, stdout=PIPE)
            git_tags = [o.strip() for o in output.split('\n') if o.strip()]

            compare('Are all tags preserved?', svn_tags, git_tags)
            compare('Are all branches preserved?', svn_branches, git_branches)
            compare_master_and_trunk(item, repo, svn_url)


parser = ArghParser()
parser.add_commands([
    sync,
    svnexport,
    gitcopy,
    publish,
    analyze,
    ])


if __name__ == '__main__':
    parser.dispatch()
