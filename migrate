#!bin/py

import re
import os
import shlex
import json
import shutil
import xmlrpclib
import ConfigParser
import requests

from argh import arg
from argh import ArghParser

from subprocess import Popen
from subprocess import PIPE
from xml.etree import ElementTree


CWD = os.path.dirname(__file__)
SVN_REPOS = 'plone;collective;archetypes'
GITHUB = 'https://api.github.com'
VERSION_RE = re.compile(r'^(plone|v)?[\d._-]+'
    '(alpha|beta|branch|rc|RC|final|a|b|c|x)?(\d)*$')

#
# common utils
def path(*arg):
    return os.path.abspath(os.path.join(*arg))

def call(cmd, *arg, **kw):
    #print "COMMAND: " + cmd
    return Popen(shlex.split(cmd), *arg, **kw).communicate()[0]

def header(txt):
    print
    print '-'*len(txt)
    print txt
    print '-'*len(txt)
    print

def line(txt, level=0):
    print ' '*level*4 + txt

def sha_checklist(directory):
    checklist = []
    for root, dirs, files in os.walk(directory):
        for names in files:
            checklist.append(call('sha1sum '+path(root,names), stdout=PIPE))
    return checklist



# 
# COMMANDS

@arg('--svn-base-url', default='http://svn.plone.org/svn/')
@arg('--svn-repos', default=SVN_REPOS)
@arg('--repos-path', default=path(CWD, 'repos'))
def sync(args):

    svn_mirror_path = path(args.repos_path, 'svn-mirror')
    if not os.path.exists(svn_mirror_path):
        call('mkdir %s' % svn_mirror_path)
    
    # we initialize repo folders
    for svn_repo in args.svn_repos.split(';'):
        svn_repo = svn_repo.strip()
        if not svn_repo:
            continue

        svn_repo_mirror = path(svn_mirror_path, svn_repo)
        svn_repo_remote = '%s/%s' % (args.svn_base_url, svn_repo)
        if not os.path.isdir(svn_repo_mirror):
            call("svnadmin create %s" % svn_repo_mirror)
            hook_path = path(svn_repo_mirror, 'hooks', 'pre-revprop-change')
            with open(hook_path, 'w') as fd:
                fd.writelines(['#!/bin/sh\n', 'exit 0'])
            call('chmod 755 ' + hook_path)
            call('svnsync init file://%s %s' % (svn_repo_mirror, svn_repo_remote))

    # we start syncing the commits
    for svn_repo in args.svn_repos.split(';'):
        svn_repo = svn_repo.strip()
        if not svn_repo:
            continue

        header('Syncing %s repository' % svn_repo)
        svn_repo_mirror = path(svn_mirror_path, svn_repo)
        call('svn propget svn:sync-last-merged-rev --revprop -r 0 file://%s' % svn_repo_mirror)
        call('svnsync --non-interactive sync file://%s' % svn_repo_mirror)
        call('svnadmin pack %s' % svn_repo_mirror)


@arg('--rules-file', default=None)
@arg('--authors', default=path(CWD, 'authors.cfg'))
@arg('--svn-all-fast-export', default=path(CWD, 'svn2git', 'svn-all-fast-export'))
@arg('--svn-repos', default=SVN_REPOS)
@arg('--repos-path', default=path(CWD, 'repos'))
def svnexport(args):
    for svn_repo in args.svn_repos.split(';'):
        svn_repo = svn_repo.strip()
        if not svn_repo:
            continue

        svn_repo_mirror = path(args.repos_path, 'svn-mirror', svn_repo)
        svn_repo_export = path(args.repos_path, 'svn-export', svn_repo)

        if args.rules_file is None:
            rules = path(CWD, 'rules-%s.cfg' % svn_repo)
        else:
            rules = path(args.rules_file)

        if not os.path.isdir(svn_repo_export):
            call('mkdir %s -p' % svn_repo_export)

        call('%s --identity-map %s --rules %s --add-metadata %s' % (
                args.svn_all_fast_export, args.authors, rules, svn_repo_mirror),
                cwd=svn_repo_export)


@arg('--svn-projects', default=path(CWD, 'projects.cfg'))
@arg('--git-repos', default=None)
@arg('--svn-repos', default=SVN_REPOS)
@arg('--svn-base-url', default='http://svn.plone.org/svn/')
@arg('--repos-path', default=path(CWD, 'repos'))
def gitcopy(args):
    config = ConfigParser.RawConfigParser()
    config.optionxform = lambda s: s
    config.read(args.svn_projects)

    git_repos = []
    if args.git_repos is not None:
        git_repos = args.git_repos.split(';')

    for svn_repo in args.svn_repos.split(';'):
        svn_repo = svn_repo.strip()
        if not svn_repo:
            continue

        svn_repo_mirror = path(args.repos_path, 'svn-mirror', svn_repo)
        svn_repo_export = path(args.repos_path, 'svn-export', svn_repo)
        svn_repo_projects = dict(config.items(svn_repo))

        git_raw_path = path(args.repos_path, 'git-raw', svn_repo)
        if not os.path.isdir(git_raw_path):
            call('mkdir %s -p' % git_raw_path)

        for git_repo in os.listdir(svn_repo_export):
            if not git_repo.startswith('.') and \
               (git_repos == [] or (git_repos != [] and git_repo in git_repos)):

                git_repo_export = path(svn_repo_export, git_repo)
                git_repo_raw = path(git_raw_path, git_repo)
                if os.path.isdir(git_repo_raw):
                    line('Skipping copy of ' + git_repo)
                    continue

                header('Processing: %s' % git_repo)
                shutil.copytree(git_repo_export, git_repo_raw)

                ## get a list of current active svn branches
                svn_repo_remote_url = svn_repo_projects.get(git_repo)
                svn_repo_url = svn_repo_remote_url.replace(args.svn_base_url+ svn_repo, 'file://' + svn_repo_mirror)
                output = call('svn ls ' + svn_repo_url + '/branches', stdout=PIPE)
                svn_repo_branches = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]

                ## remove tags with revision specific information in them
                output = call('git tag -l', cwd=git_repo_raw, stdout=PIPE)
                for tag in output.split('\n'):
                    if '@' in tag and 'master' not in tag:
                        tag = tag.strip()
                        call('git tag -d ' + tag, cwd=git_repo_raw)

                ## remove branches
                output = call('git branch --no-color', cwd=git_repo_raw, stdout=PIPE)
                git_repo_branches = [o.strip() for o in output.split('\n') if o.strip()]
                git_repo_branches = [b.replace('* ', '') for b in git_repo_branches]
                extra_branches = set(git_repo_branches) - set(svn_repo_branches)
                extra_branches = extra_branches - set(['master'])
                for e in extra_branches:
                    match = VERSION_RE.match(e)
                    if match is None:
                        call('git branch -D %s' % e, cwd=git_repo_raw)

                call('git gc --aggressive --prune=now --quiet', cwd=git_repo_raw)
                call('git remote add origin git@github.com:plone/%s.git' % git_repo, cwd=git_repo_raw)


@arg('--repos', default=None)
@arg('--github-username', required=True)
@arg('--github-password', required=True)
@arg('--repos_path', default=path(CWD, 'repos'))
def publish(args):
    with requests.session(auth=(args.github_username, args.github_password)) as session:

        github_repos = [i['name'] for i in json.loads(session.get(GITHUB+'/orgs/plone/repos').content)]

        if args.repos is None:
            repos = os.listdir(path(args.repos_path, 'svn-mirror'))
        else:
            repos = args.repos.split(';')

        for repo in repos:
            for item in os.listdir(path(args.repos_path, 'git', repo)):

                item_path = path(args.repos_path, 'git', repo, item)
            
                out = call('git remote -v', cwd=item_path, stdout=PIPE)
                item_name = out.split('\n')[0].split()[1][len('git@github.com:plone/'):-len('.git')]

                if item_name not in github_repos:
                    session.post(GITHUB+'/orgs/plone/repos', json.dumps({
                            'name': item_name,
                            'has_wiki': False,
                            'has_issues': False,
                            }))

                call('git push --all', cwd=item_path)
                call('git push --tags', cwd=item_path)


@arg('--repos', default=None)
@arg('--projects', default=path(CWD, 'projects.cfg'))
@arg('--remote-baseurl', default='http://svn.plone.org/svn/')
@arg('--repos_path', default=path(CWD, 'repos'))
@arg('--prefix', default='test-')
def analyze(args):

    def compare(msg, svn, git):
        line("- " + msg, 1)
        diff = list(set(svn) - set(git))
        if diff:
            line("svn: "+str(svn), 2)
            line("git: "+str(git), 2)
            line("diff: "+str(diff), 2)
        else:
            line("everything ok", 2)

    def compare_master_and_trunk(item, repo, svn_url):
        line("- Do the contents of the Git master match the SVN trunk.", 1)

        svn_trunk = path(args.repos_path, 'svn-trunk', repo, item)
        git_master = path(args.repos_path, 'git-master', repo, item)

        if not os.path.isdir(svn_trunk):
            call('mkdir %s -p ' % path(svn_trunk, '..'))
            call('svn export %s/trunk %s' % (svn_url, svn_trunk))
        if not os.path.isdir(git_master):
            call('mkdir %s -p ' % path(git_master, '..'))
            call('git clone %s %s' % (path(args.repos_path, 'git', repo, item), item), cwd=path(git_master, '..'))

        f = open(path(args.repos_path, 'svn-trunk', 'sha1sum-checklist-%s.txt' % item), 'w+')
        f.writelines([i.replace('svn-trunk', 'git-master') for i in sha_checklist(svn_trunk)])
        f.close()

        try:
            diff = None
            diff = call('sha1sum --quiet -c %s' % path(args.repos_path, 'svn-trunk', 'sha1sum-checklist-%s.txt' % item), cwd=git_path, stdout=PIPE, stderr=PIPE)
        except Exception, e:
            if 'sha1sum: WARNING:' in str(e):
                diff = e.out
            else:
                raise e

        diff_list = []
        if diff:
            #if verbose > 0:
            #    for i in diff.split('\n'):
            for i in diff.split('\n'):
                if i:
                    diff_list.append(i)
        if diff_list:
            for i in diff_list:
                line(i, 2)
        else:
            line("everything ok", 2)

    config = ConfigParser.RawConfigParser()
    config.optionxform = lambda s: s
    config.read(args.projects)

    i = 1
    if args.repos is None:
        repos = os.listdir(path(args.repos_path, 'svn-mirror'))
    else:
        repos = args.repos.split(';')

    for repo in repos:
        projects = dict(config.items(repo))
        header('Analyzing "' + repo + '" repository')
        for item in os.listdir(path(args.repos_path, 'git', repo)):

            line('%s.) %s' % (i, item))
            i += 1

            ## svn tags and branches
            svn_mirror = path(args.repos_path, 'svn-mirror', repo)
            svn_url = projects.get(item).replace(args.remote_baseurl+repo, 'file://'+svn_mirror)
            output = call('svn ls ' + svn_url + '/branches', stdout=PIPE)
            svn_branches = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]
            output = call('svn ls ' + svn_url + '/tags', stdout=PIPE)
            svn_tags = [o.strip().rstrip('/') for o in output.split('\n') if o.strip()]

            ## git tags and breanches
            git_path = path(args.repos_path, 'git', repo, item)
            output = call('git branch --no-color', cwd=git_path, stdout=PIPE)
            git_branches = [o.strip() for o in output.split('\n') if o.strip()]
            git_branches = [b.replace('* ', '') for b in git_branches]
            output = call('git tag -l', cwd=git_path, stdout=PIPE)
            git_tags = [o.strip() for o in output.split('\n') if o.strip()]

            compare('Are all tags preserved?', svn_tags, git_tags)
            compare('Are all branches preserved?', svn_branches, git_branches)
            compare_master_and_trunk(item, repo, svn_url)


parser = ArghParser()
parser.add_commands([
    sync,
    svnexport,
    gitcopy,
    publish,
    analyze,
    ])


if __name__ == '__main__':
    parser.dispatch()
